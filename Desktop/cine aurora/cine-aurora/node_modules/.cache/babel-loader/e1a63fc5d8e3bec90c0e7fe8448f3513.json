{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Agustin\\\\Desktop\\\\cine aurora\\\\cine-aurora\\\\src\\\\pages\\\\movieDetail\\\\movie.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from 'axios';\nimport YouTube from \"react-youtube\";\nimport \"./movie.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Movie() {\n  _s();\n\n  const API_KEY = '6a5fa2aa71d234b5f1b196ce04746bc5';\n  const API_URL = 'https://api.themoviedb.org/3';\n  const [trailer, setTrailer] = useState(null);\n  const [currentMovieDetail, setCurrentMovieDetail] = useState({\n    title: \"Loading Movies\"\n  });\n  const [playing, setPlaying] = useState(false);\n  const {\n    id\n  } = useParams();\n\n  const fetchMovie = async () => {\n    const {\n      data\n    } = await axios.get(`${API_URL}/movie/${id}`, {\n      params: {\n        api_key: API_KEY,\n        append_to_response: \"videos\"\n      }\n    });\n\n    if (data.videos && data.videos.results) {\n      const trailer = data.videos.results.find(vid => vid.type === \"Trailer\");\n      setTrailer(trailer ? trailer : data.videos.results[0]);\n    }\n\n    setCurrentMovieDetail(data);\n  };\n\n  useEffect(() => {\n    fetchMovie();\n  }, []);\n  useEffect(() => {\n    if (trailer) {\n      setPlaying(true);\n    }\n  }, [trailer]);\n\n  const closeTrailer = () => {\n    setPlaying(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie__intro\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"movie__backdrop\",\n        src: `https://image.tmdb.org/t/p/original${currentMovieDetail.backdrop_path}`,\n        alt: \"Backdrop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie__detail\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie__detailLeft\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie__posterBox\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"movie__poster\",\n            src: `https://image.tmdb.org/t/p/original${currentMovieDetail.poster_path}`,\n            alt: \"Poster\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie__detailRight\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie__detailRightTop\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie__name\",\n            children: currentMovieDetail.original_title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie__tagline\",\n            children: currentMovieDetail.tagline\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie__releaseDate\",\n            children: [\"Release date: \", currentMovieDetail.release_date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie__genres\",\n            children: currentMovieDetail.genres && currentMovieDetail.genres.map(genre => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"movie__genre\",\n              children: genre.name\n            }, genre.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie__detailRightBottom\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"synopsisText\",\n            children: \"Synopsis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: currentMovieDetail.overview\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"viewtrailer\",\n          children: playing && trailer ? /*#__PURE__*/_jsxDEV(YouTube, {\n            videoId: trailer.key,\n            className: \"reproductor container\",\n            containerClassName: \"youtube-container amru\",\n            opts: {\n              width: \"100%\",\n              height: \"100%\",\n              playerVars: {\n                autoplay: 1,\n                controls: 0,\n                cc_load_policy: 0,\n                fs: 0,\n                iv_load_policy: 0,\n                modestbranding: 0,\n                rel: 0,\n                showinfo: 0\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 29\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Movie, \"hzumXCTstVIvvDXfqJKi63uYAv8=\", false, function () {\n  return [useParams];\n});\n\n_c = Movie;\nexport default Movie;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movie\");","map":{"version":3,"sources":["C:/Users/Agustin/Desktop/cine aurora/cine-aurora/src/pages/movieDetail/movie.js"],"names":["React","useEffect","useState","useParams","axios","YouTube","Movie","API_KEY","API_URL","trailer","setTrailer","currentMovieDetail","setCurrentMovieDetail","title","playing","setPlaying","id","fetchMovie","data","get","params","api_key","append_to_response","videos","results","find","vid","type","closeTrailer","backdrop_path","poster_path","original_title","tagline","release_date","genres","map","genre","name","overview","key","width","height","playerVars","autoplay","controls","cc_load_policy","fs","iv_load_policy","modestbranding","rel","showinfo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from 'axios';\nimport YouTube from \"react-youtube\";\nimport \"./movie.css\";\n\nfunction Movie() {\n    const API_KEY = '6a5fa2aa71d234b5f1b196ce04746bc5';\n    const API_URL = 'https://api.themoviedb.org/3';\n\n    const [trailer, setTrailer] = useState(null);\n    const [currentMovieDetail, setCurrentMovieDetail] = useState({ title: \"Loading Movies\" });\n    const [playing, setPlaying] = useState(false);\n\n    const { id } = useParams();\n\n    const fetchMovie = async () => {\n        const { data } = await axios.get(`${API_URL}/movie/${id}`, {\n            params: {\n                api_key: API_KEY,\n                append_to_response: \"videos\"\n            }\n        });\n        if (data.videos && data.videos.results) {\n            const trailer = data.videos.results.find(\n                (vid) => vid.type === \"Trailer\"\n            );\n            setTrailer(trailer ? trailer : data.videos.results[0]);\n        }\n        setCurrentMovieDetail(data);\n    }\n\n    useEffect(() => {\n        fetchMovie();\n    }, []);\n\n    useEffect(() => {\n        if (trailer) {\n            setPlaying(true);\n        }\n    }, [trailer]);\n\n    const closeTrailer = () => {\n        setPlaying(false);\n    }\n\n    return (\n        <div className=\"movie\">\n            <div className=\"movie__intro\">\n                <img className=\"movie__backdrop\" src={`https://image.tmdb.org/t/p/original${currentMovieDetail.backdrop_path}`} alt=\"Backdrop\" />\n            </div>\n            <div className=\"movie__detail\">\n                <div className=\"movie__detailLeft\">\n                    <div className=\"movie__posterBox\">\n                        <img className=\"movie__poster\" src={`https://image.tmdb.org/t/p/original${currentMovieDetail.poster_path}`} alt=\"Poster\" />\n                    </div>\n                </div>\n                <div className=\"movie__detailRight\">\n                    <div className=\"movie__detailRightTop\">\n                        <div className=\"movie__name\">{currentMovieDetail.original_title}</div>\n                        <div className=\"movie__tagline\">{currentMovieDetail.tagline}</div>\n                        <div className=\"movie__releaseDate\">Release date: {currentMovieDetail.release_date}</div>\n                        <div className=\"movie__genres\">\n                            {currentMovieDetail.genres && currentMovieDetail.genres.map(genre => (\n                                <span key={genre.id} className=\"movie__genre\">{genre.name}</span>\n                            ))}\n                        </div>\n                    </div>\n                    <div className=\"movie__detailRightBottom\">\n                        <div className=\"synopsisText\">Synopsis</div>\n                        <div>{currentMovieDetail.overview}</div>\n                    </div>\n                    <div className=\"viewtrailer\">\n                        {playing && trailer ? (\n                            <YouTube\n                                videoId={trailer.key}\n                                className=\"reproductor container\"\n                                containerClassName={\"youtube-container amru\"}\n                                opts={{\n                                    width: \"100%\",\n                                    height: \"100%\",\n                                    playerVars: {\n                                        autoplay: 1,\n                                        controls: 0,\n                                        cc_load_policy: 0,\n                                        fs: 0,\n                                        iv_load_policy: 0,\n                                        modestbranding: 0,\n                                        rel: 0,\n                                        showinfo: 0,\n                                    },\n                                }}\n                            />\n                        ) : null}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Movie;\n"]},"metadata":{},"sourceType":"module"}